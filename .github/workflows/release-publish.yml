# SPDX-FileCopyrightText: © 2021 Siemens AG
# SPDX-FileCopyrightText: © Gaurav Mishra <mishra.gaurav@siemens.com>

# SPDX-License-Identifier: GPL-2.0-only AND LGPL-2.1-only
name: Publish Release Packages

on:
  release:
    types:
      - published

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  release-build:

    strategy:
      matrix:
        os:
          - 'debian:buster'
          - 'debian:bullseye'
          - 'debian:bookworm'
          - 'ubuntu:focal'
          - 'ubuntu:jammy'

    runs-on: ubuntu-latest
    container: ${{ matrix.os }}
    continue-on-error: true

    steps:
    - name: Install git
      run: |
        apt-get update
        apt-get install -y lsb-release sudo gpg ca-certificates
        ## Add repo for latest git
        if case "${{ matrix.os }}" in debian*) true;; *) false;; esac; then
          echo "deb http://deb.debian.org/debian $(lsb_release -cs)-backports main" > /etc/apt/sources.list.d/backport.list
        else
          apt-get install -y software-properties-common
          add-apt-repository $GIT_REPO -y
        fi
        apt-get update
        apt-get install git -y
        # Remove added repos
        if case "${{ matrix.os }}" in debian*) true;; *) false;; esac; then
          rm /etc/apt/sources.list.d/backport.list
        else
          add-apt-repository --remove $GIT_REPO -y
        fi
        apt-get update
      env:
        GIT_REPO: "ppa:git-core/ppa"

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        apt-get install --no-install-recommends -y wget lsb-release sudo composer curl php-cli
        apt-get install --no-install-recommends -y libcppunit-dev libcunit1-dev libdbd-sqlite3-perl
        apt-get install --no-install-recommends -y php-sqlite3 php-zip tar debhelper libssl-dev postgresql-server-dev-all
        sudo chown -R $(id -u):$(id -g) .
        ./utils/fo-installdeps -y -b
        ./install/scripts/install-spdx-tools.sh
        rm -rf src/vendor

    - name: Get CMake v3.23.0
      uses: lukka/get-cmake@v3.23.0

    - name: Fetch tags
      run: |
        git fetch --tags

    - name: Get release info
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Set environment
      env:
        VERSION: ${{ steps.get_release.outputs.tag_name }}
      run: |
        echo PACKAGE_NAME=$(echo "FOSSology-${VERSION}-$(lsb_release -si | tr [:upper:] [:lower:])-$(lsb_release -sc | tr [:upper:] [:lower:]).tar.gz") >> $GITHUB_ENV
    - name: Configure and Generate CMake Project
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DFO_SYSCONFDIR=/etc/fossology -DFO_LOCALSTATEDIR=/var -S. -B./build -G Ninja

    - name: Build Debs
      run: |
        cmake --build build --parallel
        cd build && cpack --config CPackConfig.cmake
        # Generate random number between 3-22 for sleep in next step
        echo DELAY_DURATION=$((4 + RANDOM % 20)) >> $GITHUB_ENV

    - name: Rename package
      run: |
        find build -type f -name "*-dbgsym*" -delete
        mkdir -p packages
        mv build/*.deb packages/
        tar -czvf ${PACKAGE_NAME} packages
        # Sleep for DELAY_DURATION seconds to allow GitHub API accept new packages
        sleep "${DELAY_DURATION}s"

    - name: Upload Release Asset
      id: upload-release-asset
      uses: shogo82148/actions-upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ env.PACKAGE_NAME }}
        asset_name: ${{ env.PACKAGE_NAME }}
        asset_content_type: application/gzip
        github_token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: true

  docker-release-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get release info
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push main image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: fossology/fossology:${{ steps.get_release.outputs.tag_name }}
        labels: |
          org.opencontainers.image.version=${{ steps.get_release.outputs.tag_name }}.0
        context: .

    - name: Build and push runner image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: fossology/fossology:${{ steps.get_release.outputs.tag_name }}-scanner
        file: utils/automation/Dockerfile.ci
        labels: |
          org.opencontainers.image.version=${{ steps.get_release.outputs.tag_name }}.0
