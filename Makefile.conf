# FOSSology Makefile configuration
# Copyright (C) 2009-2014 Hewlett-Packard Development Company, L.P.
# Copyright (C) 2015 Siemens AG
#
# This file contains the default values for variables used in the
# Makefiles and other locations in the source tree.
# If you want different values, you can override them on
# the make command line. For example
#    'make VERSION=0.8.0.beta3 all'
# changing them here is probably a bad idea, try to use the above

#####################################################################
# Project info
#####################################################################
# the name of our project
PROJECT = fossology

# user for the project in system
PROJECTUSER = fossy

# group for the project in system
PROJECTGROUP = fossy

#####################################################################
# Install paths
#####################################################################
# pseudoroot for packaging purposes
DESTDIR =

# base of the program data tree
PREFIX = /usr/local

# executable programs that users run
BINDIR = $(PREFIX)/bin

# executable programs that sysadmins run
SBINDIR = $(PREFIX)/sbin

# config files
SYSCONFDIR = $(PREFIX)/etc/$(PROJECT)

# init script root dir
INITDIR = /etc

# object code libraries
LIBDIR = $(PREFIX)/lib

# header files
INCLUDEDIR = $(PREFIX)/include

# executables/libraries that only our project uses
LIBEXECDIR = $(PREFIX)/lib/$(PROJECT)

# non-arch-specific data
DATAROOTDIR = $(PREFIX)/share

# non-arch-dependent program data
MODDIR = $(DATAROOTDIR)/$(PROJECT)

# hardcoded repository location
REPODIR = /srv/$(PROJECT)/repository

# local state
LOCALSTATEDIR = /var/local

# project local state
PROJECTSTATEDIR = $(LOCALSTATEDIR)/lib/$(PROJECT)

# cache dir
CACHEDIR = $(LOCALSTATEDIR)/cache/$(PROJECT)

# project logdir
LOGDIR = /var/log/$(PROJECT)

# man pages
MANDIR = $(DATAROOTDIR)/man

# Man pages in *roff format, man 1
MAN1DIR = $(MANDIR)/man1

# project documentation
DOCDIR = $(DATAROOTDIR)/doc/$(PROJECT)

# webroot
WEBDIR = $(MODDIR)/www

# php root
PHPDIR = $(MODDIR)/php

#####################################################################
# Build variables
#####################################################################
SHELL = /bin/sh
INSTALL = /usr/bin/install -D
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = ${INSTALL} -m 644
MV = mv -f
ifeq ($(origin CC), default)
CC = gcc
endif
ifeq ($(origin CXX), default)
CXX = g++
endif

# these are the default cflags, recommended but not fully _required_
# if a user sets CFLAGS they get what they set it to and lose any they
# didn't include, which is the expected behavior
CFLAGS ?= -g -O2 -Wall -D_FILE_OFFSET_BITS=64
CXXFLAGS ?= $(CFLAGS)
CXXFLAGS += -std=c++0x

# agent library
# $TOP is set in each Makefile in order to make these work
FOSRCDIR = $(TOP)/src
FOLIBDIR = $(FOSRCDIR)/lib/c
FOLIBPHPDIR = $(FOSRCDIR)/lib/php
FOCLIDIR = $(FOSRCDIR)/cli
CXXFOLIBDIR = $(FOSRCDIR)/lib/cpp

FOLIB = $(FOLIBDIR)/libfossology.a
CXXFOLIB = $(CXXFOLIBDIR)/libfossologyCPP.a

GLIB_CFLAGS := $(shell pkg-config --cflags glib-2.0)
GLIB_LDFLAGS := $(shell pkg-config --libs glib-2.0)

PG_INCLUDEDIR := $(shell pg_config --includedir)

FO_CFLAGS = -I$(PG_INCLUDEDIR) $(GLIB_CFLAGS) -I$(FOLIBDIR) $(CFLAGS)
FO_LDFLAGS = -lfossology -L$(FOLIBDIR) $(GLIB_LDFLAGS) -lpq $(LDFLAGS)

FO_CXXFLAGS = -I$(CXXFOLIBDIR) $(FO_CFLAGS) $(CXXFLAGS)
FO_CXXLDFLAGS = -lfossologyCPP -L$(CXXFOLIBDIR) -lstdc++ $(FO_LDFLAGS)

# define VERSION and SVN_REV
VERSION=`if [ -e $(TOP)/VERSIONSTRING ]; then cat $(TOP)/VERSIONSTRING ; else echo trunk; fi`
SVN_REV=`git show > /dev/null 2>&1 && git show | head -1 | awk '{print substr($$2,1,6)}' || echo "unknown"`

export PATH := $(TOP)/src/vendor/bin:$(PATH)

# directory containing the php iPATHFILE include file
FOWWWDIR = $(FOSRCDIR)/www/ui

# for use when coverage C code 
FLAG_COV = -O0 -fprofile-arcs -ftest-coverage

# to run phpunit tests
PHPUNIT = $(FOSRCDIR)/vendor/bin/phpunit
PHPUNIT_CONF = $(FOSRCDIR)/phpunit.xml
PHPUNIT_BOOT = $(FOSRCDIR)/phpunit-bootstrap.php

WriteVERSIONFile = echo "writing VERSION file for $(1)"; \
   {\
    echo "[$(1)]";\
    echo "VERSION=$(VERSION)";\
    echo "SVN_REV=$(SVN_REV)";\
    echo BUILD_DATE=`date +"%Y/%m/%d %R %Z"`;\
    git show -s --format="%ct.%h" 2>/dev/null | {\
     IFS='.' read ctimestamp chash && {\
      echo "COMMIT_DATE=$$(date -d"@$$ctimestamp" +"%Y/%m/%d %R %Z" )";\
      echo "COMMIT_HASH=$$chash";\
     } || {\
      echo "COMMIT_DATE=unknown";\
      echo "COMMIT_HASH=unknown";\
     }\
    }\
   } > VERSION

# define VERSION and SVN_REV
DEFS = -DVERSION_S=\"$(VERSION)\" -DSVN_REV_S=\"$(SVN_REV)\"

# build html coverage report
#LCOV_OPT = --rc lcov_branch_coverage=1
LCOV_OPT =
coverage-report-html = lcov --directory "$(1)" $(LCOV_OPT) --capture --output-file cov_raw.txt && \
   lcov --remove cov_raw.txt $(LCOV_OPT) '/usr/include/*' '*/agent_tests/*' '*/tests/*' -o cov.txt && \
   rm cov_raw.txt && \
   genhtml -o results $(LCOV_OPT) cov.txt && \
   rm cov.txt

# TWIG_CACHE = <parameter key=\"cache\" type=\"constant\">false</parameter>
TWIG_CACHE = <parameter key=\"cache\" type=\"string\">$(CACHEDIR)</parameter>
