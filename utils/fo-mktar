#!/bin/bash
# This script packages the directory into a tar file.
# Copyright (C) 2014 Hewlett-Packard Development Company, L.P.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  version 2 as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

set -e

# make sure we're in a checked out git copy
if [ ! -d .git ]; then
    echo "ERROR: No Git information found. This script requires an git tree."
    exit 1
fi

# Check if SVN is available.  If not, then abort.
which git >/dev/null 2>&1
if [ $? != 0 ]; then
    echo "ERROR: git command missing."
    exit 2
fi

######################################################################
# Package things up

# Envirnomental variable $PACKAGE_WORKDIR defaults to ".."
PACKAGE_WORKDIR=${PACKAGE_WORKDIR:-..}
if [ ! -d "${PACKAGE_WORKDIR}" ]; then
    echo "ERROR: ${PACKAGE_WORKDIR} is not a folder, exiting."
    exit 3
fi

if [ ! -f "Makefile.conf" ]; then
   echo "ERROR: This utility must be run from the top of the fossology source tree."
   exit 4
fi

VERSION="`git describe --tags > /dev/null 2>&1 && git describe --tags | head -1`"

# COMMIT_HASH is the last revision from git info.  This is used for packaging.
COMMIT_HASH="`git show | head -1 | awk '{print substr($2,1,6)}'`"

TARBASE="fossology-$VERSION"

if [ "$1" = "-s" ]; then
   TARBASE="fossology-$VERSION-$COMMIT_HASH"
fi

echo "*** Packaging $VERSION (git $COMMIT_HASH) into $TARBASE ***"

if [ -d "${PACKAGE_WORKDIR}/$TARBASE" ]; then
   echo "WARNING: ${PACKAGE_WORKDIR}/$TARBASE exists, removing"
   rm -rf "${PACKAGE_WORKDIR}/$TARBASE"
   if [ -d "${PACKAGE_WORKDIR}/$TARBASE" ]; then
      echo "ERROR: Unable to delete ${PACKAGE_WORKDIR}/$TARBASE, exiting."
      exit 5
   fi
fi

echo "*** Exporting git version $COMMIT_HASH to ${PACKAGE_WORKDIR}/$TARBASE ***"
git checkout-index -a -f --prefix="${PACKAGE_WORKDIR}/${TARBASE}/"
if [ $? != 0 ]; then
   echo "ERROR: git export failed."
   exit 6
fi

echo "*** Download php dependencies ***"
(
cd "${PACKAGE_WORKDIR}/$TARBASE"
make phpvendors-no-dev
)

echo "*** Create the tar ***"
(
cd ${PACKAGE_WORKDIR}
if [ -f "$TARBASE.tar.gz" ]; then
   echo "WARNING: ${PACKAGE_WORKDIR}/$TARBASE.tar.gz exists, removing"
   rm -f "$TARBASE.tar.gz"
   if [ -f "$TARBASE.tar.gz" ]; then
      echo "ERROR: unable to remove ${PACKAGE_WORKDIR}/$TARBASE.tar.gz, exiting."
      exit 7
   fi
fi

echo "*** Creating tar ***"
tar --anchored --exclude=\*/debian -czf "$TARBASE.tar.gz" "$TARBASE"
if [ $? != 0 ]; then
   echo "ERROR: unable to create ../$TARBASE.tar.gz, exiting."
   exit 8
fi
)

# Clean up
echo "*** Cleaning up ***"
rm -rf "${PACKAGE_WORKDIR}/$TARBASE"
if [ -d "${PACKAGE_WORKDIR}/$TARBASE" ]; then
   echo "WARNING: Unable to clean up ${PACKAGE_WORKDIR}/$TARBASE, exiting."
   exit 9
fi

echo "*** ${PACKAGE_WORKDIR}/$TARBASE.tar.gz created successfully. ***"
