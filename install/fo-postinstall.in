#!/usr/bin/env bash
# FOSSology postinstall script
# Copyright (C) 2008-2013 Hewlett-Packard Development Company, L.P.
# Copyright (C) 2015 Siemens AG
#
# This script is for things that need to be done on the runtime system
# after we've installed the bits on the filesystem. It needs to be
# idempotent, meaning that running it repeatedly will still do the
# right thing, regardless of the success of previous runs.

show_help() \{
  cat <<EOF
Usage: fo-postinstall [options]
  -a or --agent           : agent specific actions
  -d or --database        : Create the FOSSology database
  -w or --web-only        : web interface specific actions
  -s or --scheduler-only  : scheduler specific actions
  -e or --everything      : all actions, default
  -o or --overwrite       : overwrite config files with new versions
  -l or --licenseref      : update the license_ref table with fossology supplied licenses
  -c or --common          : common actions
  -h or --help            : this help text
 Special options
  --no-running-database   : omit all database operations
  --force-decision        : Force update of SHA256 hash in decision tables
  --force-pfile           : Force calculation of SHA256 hash of pfile entries
EOF
\}

AGENT=''
DATABASE=''
WEBONLY=''
SCHEDULERONLY=''
EVERYTHING=''
OVERWRITE=''
LICENSEREF=''
COMMON=''
RUNNINGDATABASE=true
FORCEDECISION=''
FORCEPFILE=''

## Options parsing and setup
# parse options
OPTS=$(getopt -o adwseolch --long agent,database,web-only,scheduler-only,everything,overwrite,licenseref,common,no-running-database,force-decision,force-pfile,help -n 'fo-postinstall' -- "$@")

if [[ $? -ne 0 ]]; then
   OPTS="--help"
fi

eval set -- "$OPTS"

# if no options or just -o or --force-decision/pfile with or without -o then
# do everything
if [[ $OPTS == ' --' || $OPTS == ' -o --' || $OPTS == ' --force-decision --' \
  || $OPTS == ' --force-pfile --' || $OPTS == ' -o --force-decision --' \
  || $OPTS == ' -o --force-pfile --' || $OPTS == ' --force-decision --force-pfile --' \
  || $OPTS == ' -o --force-decision --force-pfile --' ]]; then
   EVERYTHING=true
fi

while true; do
   case "$1" in
      -a|--agent)            AGENT=true; shift;;
      -d|--database)         DATABASE=true; shift;;
      -w|--web-only)         WEBONLY=true; shift;;
      -s|--scheduler-only)   SCHEDULERONLY=true; shift;;
      -e|--everything)       EVERYTHING=true; shift;;
      -o|--overwrite)        OVERWRITE=true; shift;;
      -l|--licenseref)       LICENSEREF=true; shift;;
      -c|--common)           COMMON=true; shift;;
      --no-running-database) RUNNINGDATABASE=''; shift;;
      --force-decision)      FORCEDECISION='--force-decision'; shift;;
      --force-pfile)         FORCEPFILE='--force-pfile'; shift;;
      -h|--help)             show_help; exit;;
      --)                    shift; break;;
      *)                     echo "Error: option $1 not recognised"; exit 1;;
   esac
done

set -o errexit -o nounset -o pipefail

if [[ $EVERYTHING ]]; then
   echo "*** Running postinstall for everything ***"
   COMMON=true
   SCHEDULERONLY=true
   AGENT=true
   DATABASE=true
   WEBONLY=true
   LICENSEREF=true
fi

must_run_as_root() \{
  # This must run as root.
  if [[ $(id -u) -ne 0 ]] ; then
    echo >&2 "ERROR: fo-postinstall must run as root."
    echo >&2 "Aborting."
    exit 1
  fi
\}

read_config_value() \{
   local line="$1"
   local key="$2"
   local out="$3"
   [[ "$out" =~ ^[a-zA-Z]+$ ]] || \{ echo >&2 "FATAL: bad parameters to read_config_value: $@"; exit 1; \}
   if [[ $line =~ ^[[:space:]]*${key}[[:space:]]*\=[[:space:]]*([^[:space:]\']*) ]]; then
      eval "$out='$\{BASH_REMATCH[1]\}'"
   fi
\}

set_value_in_section() \{
   echo "NOTE: writing $2=$3 in section $4 of $1"
   sed -e "s/\[$4\]/[$4]\n$2=$3/" -i.bak "$1"
\}

REPO=''
PROJECTGROUP=''
CONFIG="{$SYSCONFDIR}/fossology.conf"
if [[ -f $CONFIG ]]; then
   while read line; do
      read_config_value "$line" path REPO
      read_config_value "$line" PROJECTGROUP PROJECTGROUP
   done < "$CONFIG"
   [[ $PROJECTGROUP =~ ^[a-z0-9]*$ ]] || \{ echo >&2 "ERROR: bad value for PROJECTGROUP in config"; exit 2; \}
else
   echo >&2 "ERROR: Cannot find $CONFIG"
   exit 1
fi

if [[ $COMMON ]]; then
   must_run_as_root
   echo "*** Running postinstall for common actions***"

   # check path to repo
   [[ $REPO ]] || \{ echo >&2 "ERROR: path is not set in $CONFIG"; exit 1; \}

   # set default when PROJECTGROUP is not set
   [[ $PROJECTGROUP ]] || \{
      set_value_in_section "$CONFIG" PROJECTGROUP {$PROJECTGROUP} 'DIRECTORIES'
      PROJECTGROUP="{$PROJECTGROUP}"
   \}

   ## create user and group
   # Because we are doing these by name, in the multi-machine install case
   # we may end up with uid/gid being different across machines. This will
   # either need to be fixed by hand or with NFSv4 you can use rpc.idmapd
   # to do uid/gid mapping. More details will be provided in the multi-machine
   # documentation.

   # Make sure the user and group exist, if not then create
   echo "*** Creating user and group ***"

   # check for group
   if grep -q "^$PROJECTGROUP:" /etc/group; then
      echo "NOTE: group '$PROJECTGROUP' already exists, good."
   elif groupadd --system "$PROJECTGROUP"; then
      echo "NOTE: group '$PROJECTGROUP' created"
   else
      echo >&2 "ERROR: Unable to create group '$PROJECTGROUP'"
      exit 1
   fi

   # check for user
   if grep -q "^{$PROJECTUSER}:" /etc/passwd; then
      echo "NOTE: user '{$PROJECTUSER}' already exists, good."
      USERSHELL=$(grep "^{$PROJECTUSER}:" /etc/passwd | cut -d: -f 7)
      if [[ $USERSHELL == "/bin/false" ]]; then
         echo >&2 "ERROR: {$PROJECTUSER} shell must be a real shell"
         exit 1
      fi
      USERHOME=$(grep "^{$PROJECTUSER}:" /etc/passwd | cut -d: -f 6)
      if [[ $USERHOME != "/home/{$PROJECTUSER}" ]]; then
         echo "NOTE: change user '{$PROJECTUSER}' homedir from $USERHOME to /home/{$PROJECTUSER}."
         mkdir --parents /home/{$PROJECTUSER}
         chown {$PROJECTUSER}:$PROJECTGROUP /home/{$PROJECTUSER}
         usermod --home /home/{$PROJECTUSER} {$PROJECTUSER}
      fi
   elif useradd --comment "{$PROJECT}" --gid $PROJECTGROUP --create-home --shell /bin/bash --system {$PROJECTUSER}; then
      echo "NOTE: user '{$PROJECTUSER}' created"
   else
      echo >&2 "ERROR: Unable to create user '{$PROJECTUSER}'"
      exit 1
   fi

   ## check for existance/ownership/permissions of needed directories
   echo "*** Making sure needed dirs exist with right ownership/permissions ***"

   if [[ -d "{$CACHEDIR}" ]]; then
       echo "*** clearing file cache ***"
       rm --force --recursive {$CACHEDIR}/*
   fi
   if [[ -d "$REPO" ]]; then
       echo "NOTE: Repository already exists at $REPO"
   fi

   mkdir --parents \
      "{$PROJECTSTATEDIR}" \
      "{$PROJECTSTATEDIR}/agents" \
      "{$CACHEDIR}" \
      "$REPO"

   chown root:$PROJECTGROUP "{$PROJECTSTATEDIR}" "{$PROJECTSTATEDIR}/agents" {$CACHEDIR}
   chmod 2775 "{$PROJECTSTATEDIR}" "{$PROJECTSTATEDIR}/agents" {$CACHEDIR}

   # make sure repo and its parent dir has the right permissions
   if [[ $(stat -c "%G" $REPO) != {$PROJECTGROUP} ]]; then
     echo "NOTE: Repository group is not correct."
     echo "Fixing..This may take long duration, depending on your repository size."
     chown --recursive {$PROJECTUSER}:$PROJECTGROUP $\{REPO%/*\} $REPO
   fi
   chmod 2770 $\{REPO%/*\} $REPO

   # make install sets Db.conf's mode to 660, but can't chgrp it because
   # the group doesn't exist until we create it above. So chgrp now
   chgrp $PROJECTGROUP {$SYSCONFDIR}/Db.conf || echo >&2 "ERROR: failed to chgrp {$SYSCONFDIR}/Db.conf"

   cat <<EOF
NOTE: Running the PostgreSQL vacuum and analyze command can result in a large database performance improvement.
      We suggest that you either configure postgres to run its autovacuum and autoanalyze daemons, or maintagent -D in a cron job, or run Admin > Maintenance on a regular basis.
      Admin > Dashboard will show you the last time vacuum and analyze have been run.
EOF
fi

[[ $PROJECTGROUP ]] || \{ echo "PROJECTGROUP is not set"; exit 2; \}

if [[ $WEBONLY ]]; then
   echo "*** Running postinstall for web-only actions***"
   LICENSEREF=true
fi

########################################################################

if [[ $DATABASE && $RUNNINGDATABASE ]]; then
   {$LIBEXECDIR}/dbcreate
fi # end of DATABASE

if [[ $LICENSEREF && $RUNNINGDATABASE ]]; then
   echo "*** update the database and license_ref table ***"
   {$LIBEXECDIR}/fossinit.php -l -c {$SYSCONFDIR} $FORCEDECISION $FORCEPFILE
fi # end of license reference

########################################################################

if [[ $AGENT ]]; then
   must_run_as_root
   # change all files ownership to {$PROJECTUSER}:$PROJECTGROUP
   chown --recursive {$PROJECTUSER}:$PROJECTGROUP {$MODDIR} {$LIBEXECDIR} {$SYSCONFDIR}
   chown --silent {$PROJECTUSER}:$PROJECTGROUP {$INCLUDEDIR}/libfossology.h
   chown --silent {$PROJECTUSER}:$PROJECTGROUP {$MAN1DIR}/cp2foss.1{,.gz} {$MAN1DIR}/fossjobs.1{,.gz} || echo
fi

if [[ $AGENT && $RUNNINGDATABASE ]]; then
   if ! {$LIBEXECDIR}/fo_dbcheck.php -c {$SYSCONFDIR}; then
     echo "FATAL: unable to connect to database, please check {$SYSCONFDIR}/Db.conf"
     exit 1
   fi
   echo "Database connectivity is good."
fi # end of AGENT

########################################################################

if [[ $SCHEDULERONLY ]]; then
   must_run_as_root
   echo "*** Setting up scheduler ***"

   # Create the scheduler log directory.
   if [[ -f {$LOGDIR} ]] ; then
     # Must be a directory and not a file
     rm --force {$LOGDIR}
   fi
   mkdir --parents {$LOGDIR}
   chown --recursive {$PROJECTUSER}:$PROJECTGROUP {$LOGDIR}
   chmod 2775 {$LOGDIR}
   find {$LOGDIR} -type f -print0 | xargs --no-run-if-empty --null chmod 660
fi # end of SCHEDULERONLY

########################################################################
if [[ $WEBONLY ]]; then
   must_run_as_root

   echo "*** Setting up the web interface ***"

   # See if web server user exists, if so add to the group.
   # check for www-data (Debian, etc)
   if grep -q "^www-data:" /etc/passwd; then
     echo "NOTE: Adding user www-data to group $PROJECTGROUP"
     # this is smart enough to not add multiple times so it's ok to repeat
     usermod --groups $PROJECTGROUP --append www-data
   fi

   # check for apache (RHEL/CentOS, etc)
   if grep -q "^apache:" /etc/passwd; then
     echo "NOTE: Adding user apache to group $PROJECTGROUP"
     # this is smart enough to not add multiple times so it's ok to repeat
     usermod --groups $PROJECTGROUP --append apache
   fi

   # Enable mod_rewrite for REST API
   if [[ -f /etc/httpd/conf.modules.d/00-base.conf ]]; then
     # We are on RHEL
     if ! egrep -q "^LoadModule rewrite_module modules/mod_rewrite.so" /etc/httpd/conf.modules.d/00-base.conf; then
       echo "NOTE: Enabling apache module rewrite"
       echo "LoadModule rewrite_module modules/mod_rewrite.so" >> /etc/httpd/conf.modules.d/00-base.conf
       systemctl restart httpd
     fi
   else
     # We are on Debian
     echo "NOTE: Enabling apache module rewrite"
     a2enmod rewrite
     apachectl restart
   fi

   # apache2 reload is only necessary when it is running.
   if /etc/init.d/apache2 status > /dev/null; then
     /etc/init.d/apache2 reload
   fi
fi # end of WEBONLY

########################################################################

echo "FOSSology postinstall complete, but sure to complete the remaining"
echo "  steps in the INSTALL instructions."
