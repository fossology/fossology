{# SPDX-FileCopyrightText: Â© 2025 Rajul Jha <rajuljha49@gmail.com>

   SPDX-License-Identifier: GPL-2.0-only
#}

{% import "include/macros.html.twig" as macro %}


<li>
  {{ 'ScanCode Toolkit'|trans }}<img src="images/info_16.png"  data-toggle="tooltip" title="{{ 'To scan code and detect licenses, copyrights, author and more.'|trans }}" alt="" class="info-bullet"/>, {{'scan for'|trans }}<br/>
  <input type="checkbox" class="browse-upload-checkbox view-license-rc-size" name="scancodeFlags[]" value="license" /> {{ 'License'|trans }}<img src="images/info_16.png" data-toggle="tooltip" title="{{ 'A full comparison between the database of licenses present in ScanCode and the code uploaded by users based approach'|trans }}" alt="" class="info-bullet"/><br />
  <input type="checkbox" class="browse-upload-checkbox view-license-rc-size" name="scancodeFlags[]" value="copyright" /> {{ 'Copyright'|trans }}<img src="images/info_16.png" data-toggle="tooltip" title="{{ 'Copyright along with copyright holder/author information'|trans }}" alt="" class="info-bullet"/><br />
  <input type="checkbox" class="browse-upload-checkbox view-license-rc-size" name="scancodeFlags[]" value="email" /> {{ 'Email'|trans }}<img src="images/info_16.png" data-toggle="tooltip" title="{{ 'Email(s) present in the scan code file'|trans }}" alt="" class="info-bullet"/><br />
  <input type="checkbox" class="browse-upload-checkbox view-license-rc-size" name="scancodeFlags[]" value="url" /> {{ 'URL'|trans }} <img src="images/info_16.png" data-toggle="tooltip" title="{{ 'URL(s) present in the scan code file'|trans }}" alt="" class="info-bullet"/>
</li>



{#
<li>
  {{ 'Atarashi Agent'|trans }}
  <img src="images/info_16.png" class="info-bullet" data-toggle="tooltip"
       title="{{ 'Run text statistic based license detection algorithms'|trans }}" alt="" />
  <br/>

  <!-- Agent Selection (Radio buttons for exactly one) -->
  <label>{{ 'Select the Atarashi Agent to use:'|trans }}</label><br/>
  <input type="radio" name="atarashiAgent" value="DLD" required />
  {{ 'DLD'|trans }}<br/>

  <input type="radio" name="atarashiAgent" value="tfidf" />
  {{ 'TF-IDF'|trans }}<br/>

  <input type="radio" name="atarashiAgent" value="Ngram" />
  {{ 'N-gram'|trans }}<br/>

  <input type="radio" name="atarashiAgent" value="wordFrequencySimilarity" />
  {{ 'Word Frequency Similarity'|trans }}<br/><br/>

  <!-- Similarity Options: shown only if agent is tfidf or Ngram -->
  <div id="similarityOptions" style="display:none;">
    <label>{{ 'Select Similarity Method:'|trans }}</label><br/>
    <select name="atarashiSimilarity" id="atarashiSimilarity">
      <!-- Options populated dynamically based on selected agent -->
    </select>
    <br/><br/>
  </div>

  <!-- Verbose checkbox -->
  <input type="checkbox" name="atarashiVerbose" value="true" />
  {{ 'Enable Verbose Mode'|trans }}
  <img src="images/info_16.png" class="info-bullet" data-toggle="tooltip"
       title="{{ 'Prints detailed debug output during agent execution'|trans }}" alt="" />
</li>

<script type="text/javascript">

  // Dynamic display of similarity options based on selected agent
  document.addEventListener('DOMContentLoaded', function () {
    const agentRadios = document.getElementsByName('atarashiAgent');
    const simOptionsDiv = document.getElementById('similarityOptions');
    const simSelect = document.getElementById('atarashiSimilarity');

    const similarityMap = {
      tfidf: ['cosineSim', 'scoreSim'],
      Ngram: ['cosineSim', 'DiceSim', 'BigramCosineSim']
    };

    function updateSimilarityOptions(agent) {
      if (similarityMap[agent]) {
        simSelect.innerHTML = '';
        similarityMap[agent].forEach(function (opt) {
          const option = document.createElement('option');
          option.value = opt;
          option.textContent = opt;
          simSelect.appendChild(option);
        });
        simOptionsDiv.style.display = 'block';
      } else {
        simSelect.innerHTML = '';
        simOptionsDiv.style.display = 'none';
      }
    }

    agentRadios.forEach(function (radio) {
      radio.addEventListener('change', function () {
        updateSimilarityOptions(this.value);
      });
    });
  });
</script>
#}