{# Copyright 2014-2018 Siemens AG

   Copying and distribution of this file, with or without modification,
   are permitted in any medium without royalty provided the copyright notice and this notice are preserved.
   This file is offered as-is, without any warranty.
#}
tableColumns = [
  {"sTitle": "{{ "Upload Name and Description"|trans }}", "sClass": "left"},
  {"sTitle": "{{ "Status"|trans }}", "sClass": "center", "bSearchable": false},
  {
    "sTitle": "{{ "Comment"|trans }}", "sClass": "center cc", "bSortable": false, "bSearchable": false,
    "mRender": 2
  },
  {"sTitle": "{{ "Main licenses"|trans }}", "sClass": "center", "bSearchable": false, "bSortable": false},
  {"sTitle": "{{ "Assigned to"|trans }}", "sClass": "center", "bSearchable": false},
  {"sTitle": "{{ "Upload Date"|trans }}", "sClass": "center", "sType": "string", "bSearchable": false},
  {
    "sTitle": "{{ "Priority"|trans }}", "sClass": "center priobucket", "bSearchable": false,
    "mRender": function (source, type, val) {
      return prioColumn(source, type, val);
    }
  }
];

tableSorting = [
  [6, "desc"],
  [0, "asc"],
  [4, "desc"],
  [1, "desc"],
  [5, "desc"]
];

var folder = {{ folder }};
var browseTable;

dataTableConfig =
    {
      "bServerSide": true,
      "sAjaxSource": "?mod=browse-processPost",
      "fnServerData": function (sSource, aoData, fnCallback) {
          aoData.push({"name": "folder", "value": folder});
          aoData.push({"name": "show", "value": "{{ show }}"});
        aoData.push({"name": "assigneeSelected", "value": assigneeSelected});
        aoData.push({"name": "statusSelected", "value": statusSelected});
        $.getJSON(sSource, aoData, fnCallback).fail(failed);
      },
      "aoColumns": tableColumns,
      "aaSorting": tableSorting,
      "iDisplayLength": 50,
      "bProcessing": true,
      "bStateSave": true,
      "bRetrieve": true
    };

function createBrowseTable() {
  var otable = $('#browsetbl').DataTable(dataTableConfig);
  return otable;
}

$(document).ready(function() {
  browseTable = createBrowseTable();
  $('.clickable-folder').click(function(event){
    folder = $(this).attr('data-folder');
    browseTable.fnDraw();
    $('#current-folder').text($(this).text());
    $('#browse-upload-all').val(folder);
    return false;
  });
  $('#browse-upload-all').button().change(function ( event ){
    $('#browse-upload-all-label').removeClass("ui-state-focus ui-state-hover ui-state-active");
    var wholeFolder = $(this).prop('checked');
    if(wholeFolder) {
      $('#wholeFolder').switchClass('browse-upload-all-off','browse-upload-all-on');
      $('#markedUpload').switchClass('browse-upload-all-on','browse-upload-all-off');
    } else {
      $('#wholeFolder').switchClass('browse-upload-all-on','browse-upload-all-off');
      $('#markedUpload').switchClass('browse-upload-all-off','browse-upload-all-on');
    }
  });
  $('#browse-upload-all-label').removeClass("ui-state-focus ui-state-hover ui-state-active");
});

$('#nav-hider').click(function() {
  $('#nav-cell').hide('slow');
  $('#nav-shower').show('slow');  
});
$('#nav-shower').click(function() {
  $('#nav-shower').hide('slow');
  $('#nav-cell').show('slow');
});

function removeMainLicense(uploadId,licenseId) {
  if(confirm("{{'Remove this license from the main license list?'|trans}}"))
  {
    $.getJSON("?mod=conclude-license&do=removeMainLicense&upload=" + uploadId + "&licenseId=" + licenseId)
      .done(function (data) {
        var table = createBrowseTable();
        table.fnDraw(false);
      })
      .fail(failed);
  }
}

$('.multi-upload-agent').click( function() {
  $('#mod').val( $(this).attr('name') );
  return true;
});

$(function() {
  $("#tree").treeview({
    collapsed: false,
    animated: "fast",
    control: "#sidetreecontrol",
    persist: "cookie",
    cookieId: "fossology_treeview"
    });
  });
  
function prioColumn(source, type, val) {
  if (type === 'set') {
    source[1] = val;
    // Store the computed display and filter values for efficiency?
    return;
  }
  if (type === 'display') {
    if (myKey === 0) {
      return '<img alt="[to top]" src="images/icons/blue_arrow_up_32.png" class="icon-small limit-mover" {#
              #} data-source="' + source[0] + '" data-dir="top" title="{{ 'click to set priority of this upload as highest'|trans }}"/>'
              + ' <img alt="[select]" src="images/icons/arrow_updown_32.png" class="icon-small click-mover" {#
              #} title="{{ 'click to change priority of this upload'|trans }}"/>'
              + ' <img alt="[to bottom]" src="images/icons/blue_arrow_down_32.png" class="icon-small limit-mover" {#
              #} data-source="' + source[0] + '" data-dir="-1" title="{{ 'click to set priority of this upload as lowest'|trans }}"/>';
    }
    else if (myVal < source[1]) {
      return '<img alt="[move here]" src="images/icons/arrow_up_32.png" class="icon-small" {#
              #} title="{{ 'selected upload will have higher priority than this upload'|trans }}"/>';
    }
    else if (myVal > source[1]) {
      return '<img alt="[move here]" src="images/icons/arrow_down_32.png" class="icon-small" {#
              #} title="{{ 'selected upload will have lower priority than this upload'|trans }}"/>';
    }
    else
      return 'cancel <img alt="[x]" src="images/icons/close_32.png" class="icon-small" {#
              #} title="{{ 'let priority of this upload as it is'|trans }}"/>';
  }
  if (type === 'sort') {
    return -source[1];
  }
  // 'filter', 'sort', 'type' and undefined all just use the integer
  return source[1];
}
