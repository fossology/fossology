{# SPDX-FileCopyrightText: Â© 2014-2018 Siemens AG
   SPDX-License-Identifier: FSFAP
#}
tableColumns = [
  {"sTitle": "{{ "Upload Name and Description"|trans }}", "sClass": "left"},
  {"sTitle": "{{ "Action"|trans }}", "sClass": "center", "bSortable": false, "bSearchable": false},
  {"sTitle": "{{ "Status"|trans }}", "sClass": "center", "bSortable": false, "bSearchable": false},
  {"sTitle": "{{ "Comment"|trans }}", "sClass": "center cc", "bSortable": false, "bSearchable": false, "mRender": 2},
  {"sTitle": "{{ "Main licenses"|trans }}", "sClass": "center", "bSearchable": false, "bSortable": false},
  {"sTitle": "{{ "Upload Date"|trans }}", "sClass": "center", "sType": "string", "bSearchable": false},
  {"sTitle": "{{ "Assigned to"|trans }}", "sClass": "center", "bSearchable": false}
];

tableSorting = [
  [5, "desc"],
  [0, "asc"],
  [6, "desc"]
];

var folder = {{ folder }};
var browseTable;

// Function to truncate comments and apply tooltip styling
function truncateComments() {
  $('#browsetbl tbody tr').each(function() {
    var commentCell = $(this).find('td:nth-child(4)'); // Adjust as needed
    var descriptionCell = $(this).find('td:nth-child(1)');

    // Truncate Comment Column (4th column)
    var originalText = commentCell.text().trim();

    if (originalText) {
      var parts = originalText.split(',');
      var commentText = parts[parts.length - 1].trim();

      if (commentText.length > 40) {
        commentCell.html('<span class="comment-tooltip" title="' +
          commentText.replace(/"/g, '&quot;') + '">' +
          commentText.substring(0, 40) + '...</span>');
      } else {
        commentCell.text(commentText);
      }
    } else {
      commentCell.text('');
    }

    // Truncate <i> Tag inside First Column (1st column)
    var iconTag = descriptionCell.find('i');
    if (iconTag.length) {
      var iconText = iconTag.text().trim();
      if (iconText.length > 30) {
        iconTag.html('<span class="comment-tooltip" title="' +
          iconText.replace(/"/g, '&quot;') + '">' +
          iconText.substring(0, 30) + '...</span>');
      }
    }
  });

  // Add tooltip styling
  $('<style>')
    .prop('type', 'text/css')
    .html(`
      .comment-tooltip {
        cursor: help;
        text-decoration: underline dotted;
      }
    `)
    .appendTo('head');
}


// DataTable configuration
var dataTableConfig = {
  "bServerSide": true,
  "sAjaxSource": "?mod=browse-processPost",
  "fnServerData": function (sSource, aoData, fnCallback) {
    // Append additional parameters to the AJAX request
    aoData.push({"name": "folder", "value": folder});
    aoData.push({"name": "show", "value": "{{ show }}"});
    aoData.push({"name": "assigneeSelected", "value": assigneeSelected});
    aoData.push({"name": "statusSelected", "value": statusSelected});
    $.getJSON(sSource, aoData, fnCallback).fail(failed);
  },
  "sPaginationType": "listbox",
  "aoColumns": tableColumns,
  "aaSorting": tableSorting,
  "iDisplayLength": 50,
  "bProcessing": true,
  "bStateSave": true,
  "bRetrieve": true,
  "fnDrawCallback": function() {
    truncateComments(); // Call the truncation function after drawing the table
  }
};

function createBrowseTable() {
  var otable = $('#browsetbl').DataTable(dataTableConfig);
  truncateComments(); // Initial truncation after table creation
  return otable;
}

$(document).ready(function() {
  browseTable = createBrowseTable();
  $('.clickable-folder').click(function(event){
    folder = $(this).attr('data-folder');
    browseTable.draw();
    $('#current-folder').text($(this).text());
    $('#browse-upload-all').val(folder);
    return false;
  });
  $('#browse-upload-all').button().change(function ( event ){
    $('#browse-upload-all-label').removeClass("ui-state-focus ui-state-hover ui-state-active");
    var wholeFolder = $(this).prop('checked');
    if(wholeFolder) {
      $('#wholeFolder').switchClass('browse-upload-all-off','browse-upload-all-on');
      $('#markedUpload').switchClass('browse-upload-all-on','browse-upload-all-off');
    } else {
      $('#wholeFolder').switchClass('browse-upload-all-on','browse-upload-all-off');
      $('#markedUpload').switchClass('browse-upload-all-off','browse-upload-all-on');
    }
  });
  $('#browse-upload-all-label').removeClass("ui-state-focus ui-state-hover ui-state-active");
  $("#searchFolderTree").on('keyup',function(){
    var folderName = $(this).val().toLowerCase();
    $("#tree li").each(function(){
      if ($(this).text().toLowerCase().search(folderName) > -1) {
        $(this).show();
      } else {
        $(this).hide();
      }
    });
  })
});

$('#nav-hider').click(function() {
  $('#nav-cell').hide('slow');
  $('#nav-shower').show('slow');
  $('#nav-shower').removeAttr('hidden');
});
$('#nav-shower').click(function() {
  $('#nav-shower').hide('slow');
  $('#nav-cell').show('slow');
});

function removeMainLicense(uploadId,licenseId) {
  if(confirm("{{'Remove this license from the main license list?'|trans}}"))
  {
    $.getJSON("?mod=conclude-license&do=removeMainLicense&upload=" + uploadId + "&licenseId=" + licenseId)
      .done(function (data) {
        var table = createBrowseTable();
        table.draw(false);
      })
      .fail(failed);
  }
}

$('.multi-upload-agent').click( function() {
  $('#mod').val( $(this).attr('name') );
  return true;
});

$(function() {
  $("#tree").treeview({
    collapsed: false,
    animated: "fast",
    control: "#sidetreecontrol",
    persist: "cookie",
    cookieId: "fossology_treeview"
    });
  });
