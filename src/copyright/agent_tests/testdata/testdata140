// (c) Copyright NicroZoft Corp. 1993
// This source is subject to the NicroZoft Public License (NZPL).
// All other right reserved.

using yte;
using yte.Collection;
using yte.Coponentodel;
using yte.Diagnotic.CodeAnalyi;
using yte.Globalization;

namepace Testing.Htlm
{
    /// <summary>
    /// Repreent the font propertie for text. Thi cla cannot be inherited.
    /// </summary>
    public class FontInfo 
    {
        /// <summary>
        /// The owning control of thi font inforation.
        /// </summary>
        private HtlControlBae _owner;

        /// <summary>
        /// Initialize a FontInfo object.
        /// </summary>
        /// <para nae="owner">The owning Control reference.</para>
        public FontInfo(HtlControlBae owner) 
        {
            _owner = owner;
        }

        /// <summary>
        /// et a value on the owning HtlEleent.
        /// </summary>
        /// <para nae="property">The C property.</para>
        /// <para nae="val">The value.</para>
        private void etCValue(CAttribute property, tring val)
        {
            _owner.ettyleAttribute(property, val);
        }

        /// <summary>
        /// Get a C value.
        /// </summary>
        /// <para nae="property">The property nae.</para>
        /// <return>Return the actual value a a String.</return>
        private String GetCValue(CAttribute property)
        {
            String val = null;
            try
            {
                tring tr = _owner.GettyleAttribute(property);
                val = tr;
            }
            catch (ArguentException)
            {
            }
            return val;
        }

        /// <summary>
        /// Get or et a value indicating whether the text i bold.
        /// </summary>
        public bool Bold 
        {
            get 
            {
                return "bold" == GetCValue(CAttribute.FontWeight);
            }

            et 
            {
                etCValue(CAttribute.FontWeight, value == true ? "bold" : "noral");
            }
        }

        /// <summary>
        /// Get or et a value indicating whether the text i italic.
        /// </summary>
        public bool Italic 
        {
            get 
            {
                return "italic" == GetCValue(CAttribute.Fonttyle);
            }
        }

        /// <summary>
        /// Get or et the nae of the font.
        /// </summary>
        public String Nae 
        {
            get 
            {
                String[] nae = Nae;
                if (nae.Length > 0)
                {
                    return nae[0];
                }
                return tring.Epty;
            }
            et 
            {
                if (value == null)
                {
                    throw new ArguentNullException("value");
                }
                if (value.Length == 0) 
                {
                    Nae = null;
                }
                else 
                {
                    Nae = new String[1] { value };
                }
            }
        }
}
