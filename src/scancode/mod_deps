#!/usr/bin/env bash

# SPDX-FileCopyrightText: Â© 2021 Sarita Singh <saritasingh.0425@gmail.com>

# SPDX-License-Identifier: GPL-2.0-only
# Installing Package Manager for different Enviornment  
required_utils=("dos2unix")

for util in "${required_utils[@]}"; do
    if ! command -v $util &> /dev/null; then
        echo "$util is not installed. Attempting to install..."
        if [[ $EUID -ne 0 ]]; then
            echo "Unable to install $util Aborting..."
            exit 1
        else
            case $DISTRO in
                Linux)
                    # Detecting Package Manager based on Enviornment
                    if command -v apt-get &> /dev/null; then
                        sudo apt-get install -y $util
                    elif command -v yum &> /dev/null; then
                        sudo yum install -y $util
                    elif command -v dnf &> /dev/null; then
                        sudo dnf install -y $util
                    elif command -v pacman &> /dev/null; then
                        sudo pacman -S --noconfirm $util
                    else
                        echo "No compatible package manager found. Aborting..."
                        exit 1
                    fi
                    ;;
                Darwin)
                    if command -v brew &> /dev/null; then
                        brew install $util
                    else
                        echo "Homebrew is not installed. Please install Homebrew to proceed."
                        exit 1
                    fi
                    ;;
                *)
                    echo "Unsupported OS."
                    exit 1
                    ;;
            esac
        fi
    fi
done

# Line Encoding
find . -type f -print0 | parallel -0 'grep -Iql $'\r'' {} && dos2unix {}'
source "$(dirname ${BASH_SOURCE[0]})/../../utils/utils.sh"

#
# Don't show the -y option.  Should only be used for install testing, as using
# it without being careful can destroy your system.
#
YesOpt=''
EVERYTHING=''
RUNTIME=''
BUILDTIME=''

## Options parsing and setup
# parse options
OPTS=$(getopt -o rbehy --long runtime,buildtime,everything,help -n 'mod_deps' -- "$@")

if [[ $? -ne 0 ]]; then
  OPTS='--help'
fi

eval set -- "$OPTS"

# if no options or just -y then do everything
if [[ $OPTS == ' --' || $OPTS == ' -y --' ]]; then
  EVERYTHING=true
fi

while true; do
  case "$1" in
    -r|--runtime)     RUNTIME=true; shift;;
    -b|--buildtime)   BUILDTIME=true; shift;;
    -e|--everything)  EVERYTHING=true; shift;;
    -y)               YesOpt='-y'; shift;;
    -h|--help)        show_help_for_mod_deps; exit;;
    --)               shift; break;;
    *)                echo "ERROR: option $1 not recognised"; exit 1;;
  esac
done

set -o errexit -o nounset -o pipefail

must_run_as_root
need_lsb_release

if [[ $EVERYTHING ]]; then
  echo "*** Installing both runtime and buildtime dependencies ***"
  RUNTIME=true
  BUILDTIME=true
fi

# figure out what distro we're on
DISTRO=$(uname -s || lsb_release --id --short)
CODENAME=$(sw_vers -productVersion 2>/dev/null || lsb_release --codename --short 2>/dev/null)
ARCH=$(uname -m) 

########################################################################

if [[ $BUILDTIME ]]; then
  echo "*** Installing $DISTRO buildtime dependencies ***";
  case "$DISTRO" in
    Darwin) 
      brew install boost jsoncpp xz libxml2 libxslt popt zlib bzip2
      ;;
    Debian|Ubuntu)
      apt-get $YesOpt install \
        libboost-program-options-dev libjsoncpp-dev \
        libbz2-1.0 xz-utils zlib1g libxml2-dev libxslt1-dev libpopt0
      ;;
    Fedora)
      yum $YesOpt install \
        boost-devel jsoncpp-devel \
        xz-libs zlib libxml2-devel libxslt-devel bzip2-libs libpopt0
      ;;
    RedHatEnterprise*|CentOS)
      yum $YesOpt install epel-release;
      yum $YesOpt install \
        boost-devel jsoncpp-devel \
        zlib bzip2-libs xz-libs libxml2-devel libxslt-devel libpopt0
      ;;
    *) echo "ERROR: Unknown or Unsupported $DISTRO $CODENAME release, please report to the mailing list"; exit 1;;
  esac
fi

if [[ $RUNTIME ]]; then
  echo "*** Installing $DISTRO runtime dependencies ***";
  case "$DISTRO" in
    Darwin)
      brew install boost jsoncpp xz libxml2 libxslt popt zlib bzip2 python3 python@3.10
      ;;
    Debian|Ubuntu)
      apt-get $YesOpt install \
        libbz2-1.0 xz-utils zlib1g libxml2-dev libxslt1-dev libpopt0 \
        python3 python3-pip
      case "$CODENAME" in
        stretch)
          apt-get $YesOpt install libjsoncpp1 libboost-program-options1.62.0;;
        buster)
          apt-get $YesOpt install libjsoncpp1 libboost-program-options1.67.0;;
        bullseye)
          apt-get $YesOpt install libjsoncpp24 libboost-program-options1.74.0;;
        bookworm)
          apt-get $YesOpt install libjsoncpp25 libboost-program-options1.74.0;;
        sid)
          apt-get $YesOpt install libjsoncpp1 libboost-program-options1.74.0;;
        focal)
          apt-get $YesOpt install libjsoncpp1 libboost-program-options1.71.0;;
        jammy)
          apt-get $YesOpt install libjsoncpp25 libboost-program-options1.74.0;;
        noble)
          apt-get $YesOpt install libjsoncpp25 libboost-program-options1.74.0;;
        *) echo "ERROR: Unknown or Unsupported $DISTRO $CODENAME release, please report to the mailing list"; exit 1;;
      esac;;
    Fedora)
      yum $YesOpt install \
        jsoncpp boost \
        xz-libs zlib libxml2-devel libxslt-devel bzip2-libs libpopt0 \
        python3 python3-pip
      ;;
    RedHatEnterprise*|CentOS)
      yum $YesOpt install epel-release;
      yum $YesOpt install \
        jsoncpp boost \
        zlib bzip2-libs xz-libs libxml2-devel libxslt-devel libpopt0 \
        python3 python3-pip
      ;;
    *) echo "ERROR: Unknown or Unsupported $DISTRO $CODENAME release, please report to the mailing list"; exit 1;;
  esac
fi

#######################################################################
